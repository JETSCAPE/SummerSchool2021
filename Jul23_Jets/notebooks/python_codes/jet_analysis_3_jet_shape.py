# preperations
import numpy as np
import matplotlib.pyplot as plt

############################################################################
# Set File Paths
# Please set the path for pp jet data file
file_pp = '../../data/jet_pp.dat'

# Please set the path for pbpb jet data file
file_pbpb = '../../data/jet_pbpb.dat'

# Please set the value of jet cone size you used in the jet reconstruction
jetR = 0.4

# Number of hard scattering events generated by JETSCAPE
n_ev_pp = 250
n_ev_pbpb = 250

############################################################################
# preperations
import numpy as np
import matplotlib.pyplot as plt

# pi and 2pi coppied from FastJet
twopi = 6.283185307179586476925286766559005768394
pi = 0.5*twopi

# define plot style
width = 0.05
plotMarkerSize = 8
labelfontsize = 15
import matplotlib as mpl
mpl.rcParams['figure.figsize'] = [6., 4.5]
mpl.rcParams['lines.linewidth'] = 2
mpl.rcParams['xtick.top'] = True
mpl.rcParams['xtick.labelsize'] = 15
mpl.rcParams['xtick.major.width'] = 1.0
mpl.rcParams['xtick.minor.width'] = 0.8
mpl.rcParams['xtick.minor.visible'] = True
mpl.rcParams['xtick.direction'] = "in"
mpl.rcParams['ytick.right'] = True
mpl.rcParams['ytick.labelsize'] = 15
mpl.rcParams['ytick.major.width'] = 1.0
mpl.rcParams['ytick.minor.width'] = 0.8
mpl.rcParams['ytick.minor.visible'] = True
mpl.rcParams['ytick.direction'] = "in"
mpl.rcParams['legend.fontsize'] = 15
mpl.rcParams['legend.numpoints'] = 1
mpl.rcParams['font.size'] = 15
mpl.rcParams['savefig.format'] = "pdf"
############################################################################
def ratio_error(v1,e1,v2,e2):
  #v1, e1: numerator value and error
  #v2, e2: denominator value and error  
  error1 = e1/v2
  error2 = (e2/v2)*(v1/v2)
  error = np.sqrt(error1*error1+error2*error2)
  return error
############################################################################
# Load files
data_pp = np.loadtxt(file_pp, delimiter=',')
data_pbpb = np.loadtxt(file_pbpb, delimiter=',')

# Indices of the data array
i_pp = data_pp[:,0] 
i_pbpb = data_pbpb[:,0] 

# Get Indices of jets in the data array
jet_id_pp = np.where(i_pp < 0.1)
jet_id_pbpb = np.where(i_pbpb < 0.1)

# Extract jets
jets_pp = data_pp[jet_id_pp]
jets_pbpb = data_pbpb[jet_id_pbpb]

# Extract associated charged particles for pp
assoc_pp= []
for i in range(len(jet_id_pp[0])-1):
  chunck = data_pp[jet_id_pp[0][i]+1:jet_id_pp[0][i+1]]
  assoc_pp.append(chunck)
chunck = data_pp[jet_id_pp[0][-1]+1:]
assoc_pp.append(chunck)

# Extract associated charged particles for pbpb
assoc_pbpb= []
for i in range(len(jet_id_pbpb[0])-1):
  chunck = data_pbpb[jet_id_pbpb[0][i]+1:jet_id_pbpb[0][i+1]]
  assoc_pbpb.append(chunck)
chunck = data_pbpb[jet_id_pbpb[0][-1]+1:]
assoc_pbpb.append(chunck)
############################################################################
## Jet Shape
############################################################################
# Number of jets
n_jet_pp = len(jets_pp)
n_jet_pbpb = len(jets_pbpb)

# prepare arrays for delta_r = sqrt(delta_eta^2 + delta_phi^2)
dr_pp_in = []
dr_pbpb_in = []

# prepare arrays for pT_assoc
pt_pp = []
pt_pbpb = []

# Function to calculate delta_phi in [-pi,pi]
def delta_phi(phi_1, phi_2):
  dphi = phi_1 - phi_2
  if dphi >  pi: 
    dphi = dphi - twopi
  if dphi < -pi: 
    dphi = dphi + twopi
  return dphi;
  
#For pp
for i in range(n_jet_pp):
  eta_jet = jets_pp[i,2]
  phi_jet = jets_pp[i,3]  
  for assoc in assoc_pp[i]:

    eta_assoc = assoc[2]
    phi_assoc = assoc[3] 
    deta = eta_assoc - eta_jet
    dphi = delta_phi(phi_assoc, phi_jet)
    # Calculation of Delta r
    dr = np.sqrt(deta*deta + dphi*dphi)
    dr_pp_in.append(dr)

    pt_assoc = assoc[1]
    pt_pp.append(pt_assoc)

#For pbpb
for i in range(n_jet_pbpb):
  eta_jet = jets_pbpb[i,2]
  phi_jet = jets_pbpb[i,3]  
  for assoc in assoc_pbpb[i]:

    eta_assoc = assoc[2]
    phi_assoc = assoc[3] 
    deta = eta_assoc - eta_jet
    dphi = delta_phi(phi_assoc, phi_jet)
    # Calculation of Delta r
    dr = np.sqrt(deta*deta + dphi*dphi)
    dr_pbpb_in.append(dr)

    # For hole subtraction
    pt_assoc = assoc[1]
    status = assoc[4]
    if status < 0:
      pt_assoc = - pt_assoc
    pt_pbpb.append(pt_assoc)

# Set Histogram bins
r_bins = np.linspace(0, jetR, (int(jetR/0.1)+1))

# Fill Histograms
js_pp, r = np.histogram(dr_pp_in, bins=r_bins, weights=pt_pp )
js_pbpb, r = np.histogram(dr_pbpb_in, bins=r_bins, weights=pt_pbpb )

# Fill Histograms for error
w2_pp = np.array(pt_pp)*np.array(pt_pp)
e2_js_pp, r = np.histogram(dr_pp_in, bins=r_bins, weights=w2_pp )
w2_pbpb = np.array(pt_pbpb)*np.array(pt_pbpb)
e2_js_pbpb, r = np.histogram(dr_pbpb_in, bins=r_bins, weights=w2_pbpb )


# bin width
dr = (r[1:]-r[:-1])
# bin center
r = r[0:-1] + 0.5*dr

# derivative and division
js_pp = js_pp/dr/n_jet_pp
js_pbpb = js_pbpb/dr/n_jet_pbpb

# derivative and division (error)
err_js_pp = np.sqrt(e2_js_pp)/dr/n_jet_pp
err_js_pbpb = np.sqrt(e2_js_pbpb)/dr/n_jet_pbpb


# # Generate Plots
fig = plt.figure()
plt.errorbar(r, js_pp, fmt='s', label="pp", xerr=0.5*dr, yerr=err_js_pp, color='black')
plt.errorbar(r, js_pbpb, fmt='o', label="PbPb(30-40%)", xerr=0.5*dr, yerr=err_js_pbpb, color='red')

# #axes setting
plt.yscale('log')
plt.legend(loc=0)
plt.xlabel(r"$\Delta r$")
plt.ylabel(r"$P(\Delta r)$ [GeV]")
plt.xlim(0,jetR)
y_min = 10
y_max = 1000
plt.ylim(y_min,y_max)
plt.text(0.01,y_min*1.2, '5.02 TeV')

# # save plot to the Desktop
# #plt.tight_layout()
print('Find jet_shqpe.pdf')
plt.savefig('jet_shape')
############################################################################
## Ratio
############################################################################
# Generate Plots
fig = plt.figure()

# Calculate RAA and error
raa =  js_pbpb/js_pp

error_raa = ratio_error(js_pbpb,err_js_pbpb,js_pp,err_js_pp)

plt.errorbar(r, raa, fmt='o', label="PbPb(30-40%)/pp",
             xerr=0.5*dr, yerr=error_raa, color='red')


#axes setting
plt.legend(loc=0)
plt.xlabel(r"$\Delta r$")
plt.ylabel(r"$P(\Delta r)_{\mathrm{PbPb}}/P(\Delta r)_{pp}}$")
plt.xlim(0.0,jetR)
plt.ylim(0.5,1.5)
plt.legend(loc=0)
plt.text(0.012,0.52, '5.02 TeV')


plt.axhline(1, color = "black", linestyle="dashed", linewidth=0.8) 

# save plot to the Desktop
plt.tight_layout()
print('Find ratio_jet_shape.pdf')
plt.savefig('ratio_jet_shape')
############################################################################